// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../resource.mjs";
import { isRequestOptions } from "../core.mjs";
export class ConversationFlow extends APIResource {
    /**
     * Create a new Conversation Flow that can be attached to an agent. This is used to
     * generate response output for the agent.
     *
     * @example
     * ```ts
     * const conversationFlowResponse =
     *   await client.conversationFlow.create({
     *     model_choice: { model: 'gpt-5', type: 'cascading' },
     *     nodes: [
     *       {
     *         id: 'start',
     *         instruction: {
     *           text: 'Greet the customer and ask how you can help them.',
     *           type: 'prompt',
     *         },
     *         type: 'conversation',
     *       },
     *     ],
     *     start_speaker: 'agent',
     *   });
     * ```
     */
    create(body, options) {
        return this._client.post('/create-conversation-flow', { body, ...options });
    }
    retrieve(conversationFlowId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.retrieve(conversationFlowId, {}, query);
        }
        return this._client.get(`/get-conversation-flow/${conversationFlowId}`, { query, ...options });
    }
    /**
     * Update an existing conversation flow
     *
     * @example
     * ```ts
     * const conversationFlowResponse =
     *   await client.conversationFlow.update(
     *     'conversation_flow_id',
     *   );
     * ```
     */
    update(conversationFlowId, params, options) {
        const { version, ...body } = params;
        return this._client.patch(`/update-conversation-flow/${conversationFlowId}`, {
            query: { version },
            body,
            ...options,
        });
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.get('/list-conversation-flows', { query, ...options });
    }
    /**
     * Delete a conversation flow and all its versions
     *
     * @example
     * ```ts
     * await client.conversationFlow.delete(
     *   'conversation_flow_id',
     * );
     * ```
     */
    delete(conversationFlowId, options) {
        return this._client.delete(`/delete-conversation-flow/${conversationFlowId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
}
//# sourceMappingURL=conversation-flow.mjs.map